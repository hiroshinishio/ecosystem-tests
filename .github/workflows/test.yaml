name: test

on:
  # Note about push & pull_request
  # when creating a new branch for a PR, push will be triggered immediately before the PR gets created
  # The GitHub API / GitHub context base commit is then 0000000000000000000000000000000000000000
  #
  # The get-changed-files action used in the detect_jobs_to_run needs to have a non 0 base commit to ba able to diff
  # Defining both push (and specify the branches) and pull_request solves the problem
  push:
    branches:
      # Push events our default branch
      - dev
      # Push events on our special branches
      - patch-dev
      - latest
      - integration
  pull_request:
    paths-ignore:
      - '*.md'
      - 'renovate.json'

env:
  PRISMA_TELEMETRY_INFORMATION: 'e2e-tests test.yaml'
  CI: 1
  SLACK_WEBHOOK_URL_WORKFLOWS: ${{ secrets.SLACK_WEBHOOK_URL_WORKFLOWS }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  SLACK_WEBHOOK_URL_FAILING: ${{ secrets.SLACK_WEBHOOK_URL_FAILING }}
  DATABASE_URL_POSTGRES_TEMPLATE: ${{ secrets.DATABASE_URL_POSTGRES_TEMPLATE }}

defaults:
  run:
    # this makes windows use bash as well, which makes `...  >> $GITHUB_ENV` work there
    shell: bash

jobs:
  start-time:
    runs-on: ubuntu-latest
    outputs:
      start-time: ${{ steps.start-time-output.outputs.start-time }}
    steps:
      - id: start-time-output
        run: echo "::set-output name=start-time::$(date)"

  # # From https://github.com/marketplace/actions/skip-duplicate-actions
  # # This action cleans up previously running instances of a workflow on the same branch.
  # # This accomplishes the task of automatically cancelling CI runs on pushes to the same branch,
  # # which is a common feature in most CI systems but currently not possible with GitHub actions.
  # cleanup-runs:
  #   continue-on-error: true
  #   runs-on: ubuntu-latest
  # contains(github.actor, 'renovate')
  #   if: (!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/dev' && github.ref != 'refs/heads/integration' && github.ref != 'refs/heads/patch-dev' && github.ref != 'refs/heads/latest')
  #   steps:
  #     - uses: fkirc/skip-duplicate-actions@v3.4.1

  # Depending on the output we will run some or all tests as fallback
  detect_jobs_to_run:
    name: Detect jobs to run
    runs-on: ubuntu-latest
    outputs:
      jobs: ${{ steps.detect.outputs.jobs }}
    steps:
      - id: checkout
        uses: actions/checkout@v2
      - id: files
        uses: Ana06/get-changed-files@v2.1.0 # it's a fork of jitterbit/get-changed-files@v1 which works better with pull requests
        with:
          format: 'json'
      - name: Install Dependencies
        run: yarn install
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - id: detect
        run: ./.github/workflows/detect-jobs-to-run.js <<<'${{ steps.files.outputs.all }}'

  report-to-slack-success:
    runs-on: ubuntu-latest
    needs:
      - databases-windows

    if: success() && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/integration' || github.ref == 'refs/heads/patch-dev' || github.ref == 'refs/heads/latest')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: report success to slack
        run: bash .github/scripts/slack-workflow-status.sh ":white_check_mark:"

  report-to-slack-failure:
    runs-on: ubuntu-latest
    needs:
      - databases-windows

    if: failure() && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/integration' || github.ref == 'refs/heads/patch-dev' || github.ref == 'refs/heads/latest')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: report failure to slack
        run: bash .github/scripts/slack-workflow-status.sh ":x:"

  ####################################################
  ### real jobs after this


  databases-windows:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['databases-windows'] == true }}

    strategy:
      fail-fast: false
      matrix:
        clientEngine: [library] # ['library', 'binary']
        database:
          - mongodb-azure-cosmosdb-emulator
        os: [windows-latest]
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}

    steps:
      - uses: actions/checkout@v2

      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3

      #- run: cp "databases-windows/mongodb-azure-cosmosdb-emulator/Microsoft.Azure.CosmosDB.Emulator.psm1" "C:/Program Files/Azure Cosmos DB Emulator/PSModules/Microsoft.Azure.CosmosDB.Emulator/Microsoft.Azure.CosmosDB.Emulator.psm1"

      - run: ls -l "C:/Program Files/Azure Cosmos DB Emulator/PSModules/Microsoft.Azure.CosmosDB.Emulator/"
      #- uses: janpio/cosmos-emulator-github-action@mongodb
      #- run: |
      #    "C:/Program Files/Azure Cosmos DB Emulator/Microsoft.Azure.Cosmos.Emulator.exe" /EnableMongoDbEndpoint=4.0
      #  shell: cmd

      - run: |
          Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
          Start-CosmosDbEmulator
        shell: pwsh

      - run: yarn install
        working-directory: databases-windows/mongodb-azure-cosmosdb-emulator
      - run: node databases-windows/mongodb-azure-cosmosdb-emulator/cosmosclient.js
      - run: node databases-windows/mongodb-azure-cosmosdb-emulator/mongoclient.js

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: yarn install

      - name: use node 12
        uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: test ${{ matrix.database }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.database }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.database }}
